AWSTemplateFormatVersion: 2010-09-09
Transform:
  - AWS::Serverless-2016-10-31
  - AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: ""

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS,PUT'"
      AllowHeaders: "'Authorization,content-type'"
      AllowOrigin: "'*'"
Resources:
  CreateTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-CreateTask"
      Handler: functions/task/create-task.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks
            Method: post
  # GetTasks:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetTasks"
  #     Handler: functions/task/get-tasks.handler
  #     Runtime: nodejs16.x
  #     Policies: AmazonDynamoDBFullAccess
  #     Environment:
  #       Variables:
  #         NODE_ENV: production
  #     Role:
  #       Fn::GetAtt:
  #         - LambdaExecutionRole
  #         - Arn
  #     Events:
  #       GetEvent:
  #         Type: Api
  #         Properties:
  #           Path: /projects/{projectId}/tasks
  #           Method: get
  GetTasksTodos:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetTasksTodos"
      Handler: functions/task/get-tasks-todos.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks
            Method: get
  GetTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetTask"
      Handler: functions/task/get-task.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/{taskId}
            Method: get
  # GetSearchTask:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetSearchTask"
  #     Handler: functions/task/get-search-tasks.handler
  #     Runtime: nodejs16.x
  #     Policies: AmazonDynamoDBFullAccess
  #     Environment:
  #       Variables:
  #         NODE_ENV: production
  #     Role:
  #       Fn::GetAtt:
  #         - LambdaExecutionRole
  #         - Arn
  #     Events:
  #       GetEvent:
  #         Type: Api
  #         Properties:
  #           Path: /projects/{projectId}/tasks/search
  #           Method: get
  UpdateTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-UpdateTask"
      Handler: functions/task/update-task.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/{taskId}
            Method: put
  DeleteTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-DeleteTask"
      Handler: functions/task/delete-task.handler
      Runtime: nodejs16.x
      Policies:
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        DeleteEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/{taskId}
            Method: delete

  CreateTodo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-CreateTodo"
      Handler: functions/todo/create-todo.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/{taskId}/todos
            Method: post
  GetTodosByTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetTodosByTask"
      Handler: functions/todo/get-todos-by-task.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/{taskId}/todos
            Method: get
  GetTodo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetTodo"
      Handler: functions/todo/get-todo.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/{taskId}/todos/{todoId}
            Method: get
  UpdateTodo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-UpdateTodo"
      Handler: functions/todo/update-todo.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PutEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/{taskId}/todos/{todoId}
            Method: put
  DeleteTodo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-DeleteTodo"
      Handler: functions/todo/delete-todo.handler
      Runtime: nodejs16.x
      Policies:
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        DeleteEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/{taskId}/todos/{todoId}
            Method: delete
  GetSearchTodos:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetSearchTodos"
      Handler: functions/todo/get-search-todos.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/search
            Method: get
  GetTodosByAssignName:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetTodosByAssignName"
      Handler: functions/todo/get-todos-by-assign-name.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/tasks/assign
            Method: get


  CreateProject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-CreateProject"
      Handler: functions/project/create-project.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        PostEvent:
          Type: Api
          Properties:
            Path: /projects
            Method: post
  GetProjects:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetProjects"
      Handler: functions/project/get-projects.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects
            Method: get
  GetProject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetProject"
      Handler: functions/project/get-project.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}
            Method: get
  UpdateProject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-UpdateProject"
      Handler: functions/project/update-project.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}
            Method: put
  DeleteProject:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-DeleteProject"
      Handler: functions/project/delete-project.handler
      Runtime: nodejs16.x
      Policies:
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        DeleteEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}
            Method: delete

  NotifyDueDate:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-NotifyDueDate"
      Handler: functions/email/notify-todo-due-date.handler
      Runtime: nodejs16.x
      Policies:
        - AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        ApiGatewayEvent:
          Type: Api
          Properties:
            Path: /projects/{projectId}/notify
            Method: POST

  GetUsers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "awscodestar-${ProjectId}-lambda-GetUsers"
      Handler: functions/user/get-users.handler
      Runtime: nodejs16.x
      Policies: AmazonDynamoDBFullAccess
      Environment:
        Variables:
          NODE_ENV: production
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /users
            Method: get

  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "LambdaRole-${ProjectId}-Execution${Stage}"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      PermissionsBoundary: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary"
